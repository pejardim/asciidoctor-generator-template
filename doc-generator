#!/usr/bin/env python3
# -*- coding: utf-8 -*-
__author__ = "Diego Dorta"
__copyright__ = "Copyright 2020 SE Chinstrap"
__license__ = "BSD-3-Clause"
import os, sys
import argparse
from datetime import date

class SEChinstrapTemplateGenerator(object):
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)
        self.documentName = self.dn
        self.documentNameAdoc = ""
        self.documentNamePDF = ""
        self.documentNameHTML = ""
        self.documentTitle = self.dt
        self.date = ""
        self.stylePath = "themes/custom-theme.yml"
        self.fontsPath = "themes/fonts"

    def writeAdocFile(self):        
        doc = open(self.documentNameAdoc, "w")        
        doc.write("= " + self.documentTitle + "\n")        
        doc.write(":title-logo-image: image::themes/media/se-chinstrap.png[pdfwidth=40%, align=right]\n")
        doc.write("Â© 2020 SE Chinstrap\n")
        doc.write("REV 1.0, " + self.date + "\n")
        doc.write(":doctype: book\n")
        doc.write(":reproducible:\n")
        doc.write(":toc2:\n")
        doc.write(":toclevels: 5\n")
        doc.write(":source-highlighter: coderay\n")
        doc.write(":numbered:\n")
        doc.write(":icons: font\n")
        doc.write(":autofit-option:\n")
        doc.write("include::chapters/1-chapter.adoc[]\n")
        doc.close()

    def writeRakeFile(self):
        rake_file = open("Rakefile", "w")
        rake_file.write("namespace :build do\n")
        rake_file.write("task :pdf do\n")
        bundlePDF = "`bundle exec asciidoctor-pdf -a"\
                    "pdf-style={} -a pdf-fontsdir={}"\
                    " {} -o {}`\n".format(self.stylePath,
                                          self.fontsPath,
                                          self.documentNameAdoc,
                                          "output/" + self.documentNamePDF)
        rake_file.write(bundlePDF)
        rake_file.write("end\n")
        rake_file.write("task :html do\n")
        bundleHTML = "`bundle exec asciidoctor"\
                     " {} -o {}`\n".format(self.documentNameAdoc,
                                           "output/" + self.documentNameHTML)
        rake_file.write(bundleHTML)
        rake_file.write("end\n")
        rake_file.write("end\n")
        rake_file.write("desc 'Build all default formats'\n")
        rake_file.write("task :build => [ 'build:html', 'build:pdf' ]\n")

    def getDocumentInfo(self):
        dn = self.documentName.replace(" ", "")
        self.documentNameAdoc = dn + ".adoc"
        self.documentNamePDF = dn + ".pdf"
        self.documentNameHTML = dn + ".html"
        t = date.today()
        self.date = t.strftime("%B %d, %Y")

    def run(self):
        self.getDocumentInfo()
        self.writeAdocFile()
        self.writeRakeFile()

def executeRakeFile():
    bundlerGenerator = 'bundle exec rake build'
    os.system(bundlerGenerator)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--doc', action='store',
                        dest='documentName', help='Store document name')
    parser.add_argument('-t', '--title', action='store',
                        dest='documentTitle', help='Store document title')
    args = parser.parse_args()    
    if (args.documentName):
        if (args.documentTitle):
            dn = args.documentName
            dict = { "dn" : args.documentName,
                     "dt" : args.documentTitle }
            doc = SEChinstrapTemplateGenerator(**dict)        
            doc.run()
        else:
            pass
    else:
        pass
    if (os.path.exists('Rakefile')):
        executeRakeFile()
    else:
        pass
